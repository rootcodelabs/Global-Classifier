declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'UPDATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: sessionId
        type: number
        description: "Body field 'sessionId'"
      - field: validationStatus
        type: string
        description: "Body field 'validationStatus'"
      - field: validationMessage
        type: string
        description: "Body field 'validationMessage'"
      - field: progressPercentage
        type: number
        description: "Body field 'progressPercentage'"
      - field: processComplete
        type: boolean
        description: "Body field 'processComplete'"

extract_request_data:
  assign:
    session_id: ${incoming.body.sessionId}
    validation_status: ${incoming.body.validationStatus}
    validation_message: ${incoming.body.validationMessage}
    progress_percentage: ${incoming.body.progressPercentage}
    process_complete: ${incoming.body.processComplete}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${session_id !== null || !validation_status || progress_percentage !==null}
      next: get_random_string_cookie
  next: return_incorrect_request

get_random_string_cookie:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_random_string"
    headers:
      type: json
  result: res_cookie
  next: check_random_string_status

check_random_string_status:
  switch:
    - condition: ${200 <= res_cookie.response.statusCodeValue && res_cookie.response.statusCodeValue < 300}
      next: assign_csrf_cookie
  next: assign_fail_response

assign_csrf_cookie:
  assign:
    csrf_cookie: ${'_csrf=' + res_cookie.response.body.randomHexString+';'}
  next: update_dataset_progress_session

update_dataset_progress_session:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-dataset-progress-session"
    body:
      id: ${session_id}
      validation_status: ${validation_status}
      progress_percentage: ${progress_percentage}
      validation_message: ${validation_message}
      process_complete: ${process_complete}
  result: res
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: get_csrf_token
  next: assign_fail_response

get_csrf_token:
  call: http.get
  args:
    url: "[#CLASSIFIER_NOTIFICATIONS]/csrf-token"
    headers:
      cookie: ${csrf_cookie}
  result: res_token
  next: check_token_status

check_token_status:
  switch:
    - condition: ${200 <= res_token.response.statusCodeValue && res_token.response.statusCodeValue < 300}
      next: assign_csrf_token
  next: assign_fail_response

assign_csrf_token:
  assign:
    token: ${res_token.response.body.csrfToken}
  next: update_progress

update_progress:
  call: http.post
  args:
    url: "[#CLASSIFIER_NOTIFICATIONS]/dataset/progress"
    headers:
      X-CSRF-Token: ${token}
      cookie: ${csrf_cookie}
    body:
      sessionId: ${session_id}
      progressPercentage: ${progress_percentage}
      validationStatus: ${validation_status}
      validationMessage: ${validation_message}
  result: res_node
  next: check_node_server_status

check_node_server_status:
  switch:
    - condition: ${200 <= res_node.response.statusCodeValue && res_node.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      sessionId: '${session_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      sessionId: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end
