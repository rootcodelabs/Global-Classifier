declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CREATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: groupName
        type: string
        description: "Body field 'groupName'"
      - field: validationCriteria
        type: json
        description: "Body field 'validationCriteria'"
      - field: classHierarchy
        type: json
        description: "Body field 'classHierarchy'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    group_name: ${incoming.body.groupName}
    validation_criteria: ${incoming.body.validationCriteria}
    class_hierarchy: ${incoming.body.classHierarchy}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${group_name !== null || validation_criteria !=null || class_hierarchy !==null }
      next: get_epoch_date
  next: return_incorrect_request

get_epoch_date:
  assign:
    current_epoch: ${Date.now()}
    random_num: ${Math.floor(Math.random() * 100000)}
  next: create_dataset_group_metadata

create_dataset_group_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/insert-dataset-group-metadata"
    body:
      group_name: ${group_name}
      group_key:  "${random_num+ '_'+current_epoch}"
      major_version: 1
      minor_version: 0
      patch_version: 0
      latest: true
      is_enabled: false
      enable_allowed: false
      created_timestamp: ${new Date(current_epoch).toISOString()}
      last_updated_timestamp: ${new Date(current_epoch).toISOString()}
      validation_status: unvalidated
      processed_data_available: false
      raw_data_available: false
      num_samples: 0
      num_pages: 0
      validation_criteria: ${JSON.stringify(validation_criteria)}
      class_hierarchy: ${JSON.stringify(class_hierarchy)}
  result: res_dataset
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${res_dataset.response.body[0].id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end
