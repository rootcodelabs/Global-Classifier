declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'DELETE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"

extract_request_data:
  assign:
    dg_id: ${incoming.body.dgId}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${dg_id !== null}
      next: get_dataset_group_by_id
  next: return_incorrect_request

get_dataset_group_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-by-id"
    body:
      id: ${dg_id}
  result: res_dataset
  next: check_dataset_fields_status

check_dataset_fields_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: check_dataset_data_exist
  next: assign_fail_response

check_dataset_data_exist:
  switch:
    - condition: ${res_dataset.response.body.length>0}
      next: execute_cron_manager
  next: assign_fail_response

execute_cron_manager:
  call: http.post
  args:
    url: "[#CLASSIFIER_CRON_MANAGER]/execute/dataset_deletion/dataset_deletion"
    query:
      cookie: ${incoming.headers.cookie}
      dgId: ${dg_id}
  result: res
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end