declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STOP-WORDS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: stopWords
        type: array
        description: "Body field 'stopWords'"

extract_request_data:
  assign:
    stop_words: ${incoming.body.stopWords}
    next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${stop_words !== null || stop_words.length > 0 }
      next: get_stop_words
  next: return_incorrect_request

get_stop_words:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-stop-words"
  result: res_stop_words
  next: check_stop-words_status

check_stop-words_status:
  switch:
    - condition: ${200 <= res_stop_words.response.statusCodeValue && res_stop_words.response.statusCodeValue < 300}
      next: check_data_exist
  next: assign_fail_response

check_data_exist:
  switch:
    - condition: ${res_stop_words.response.body.length>0 && res_stop_words.response.body[0].stopWordsArray !== null}
      next: get_duplicate_stop_words
  next: insert_stop_words

get_duplicate_stop_words:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_stop_words_duplicates"
    headers:
      type: json
    body:
      inputArray: ${stop_words}
      existingArray: ${res_stop_words.response.body[0].stopWordsArray}
  result: res_duplicates
  next: check_duplicates_status

check_duplicates_status:
  switch:
    - condition: ${200 <= res_duplicates.response.statusCodeValue && res_duplicates.response.statusCodeValue < 300}
      next: check_for_duplicates
  next: return_not_found

check_for_duplicates:
  switch:
    - condition: ${res_duplicates.response.body.duplicates.length > 0 }
      next: assign_duplicate_response
  next: insert_stop_words

insert_stop_words:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/insert-stop-words"
    body:
      stop_words: ${stop_words}
  result: res_stop_words
  next: check_insert_status

check_insert_status:
  switch:
    - condition: ${200 <= res_stop_words.response.statusCodeValue && res_stop_words.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      operationSuccessful: true,
      duplicate: false,
      duplicateItems: '${[]}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      operationSuccessful: false,
      duplicate: false,
      duplicateItems: '${[]}'
    }
  next: return_bad_request

assign_duplicate_response:
  assign:
    format_res: {
      operationSuccessful: false,
      duplicate: true,
      duplicateItems: '${res_duplicates.response.body.duplicates}'
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end