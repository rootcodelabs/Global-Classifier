declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"
      - field: operationType
        type: string
        description: "Body field 'operationType'"

extract_request_data:
  assign:
    id: ${incoming.body.dgId}
    operation_type: ${incoming.body.operationType}
  next: get_dataset_group

get_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-allowed-status-by-id"
    body:
      id: ${id}
  result: res
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_data_exist
  next: assign_not_found_response

check_data_exist:
  switch:
    - condition: ${res.response.body.length>0}
      next: check_operation_type
  next: assign_not_found_response

check_operation_type:
  switch:
    - condition: ${operation_type === 'enable'}
      next: validate_dataset_group
    - condition: ${operation_type === 'disable'}
      next: disable_dataset_group
  next: operation_not_support

validate_dataset_group:
  switch:
    - condition: ${res.response.body[0].enableAllowed === true}
      next: enable_dataset_group
  next: assign_not_allowed_response

enable_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/enable-dataset-group"
    body:
      id: ${id}
  result: res
  next: check_enable_disable_status

disable_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/disable-dataset-group"
    body:
      id: ${id}
  result: res
  next: check_enable_disable_status

check_enable_disable_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_status_update_error_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${id}',
      operationType: '${operation_type}',
      operationSuccessful: true,
      errorResponse: ""
    }
  next: return_ok

assign_not_allowed_response:
  assign:
    format_res: {
      dgId: '${id}',
      operationType: '${operation_type}',
      operationSuccessful: false,
      errorResponse: "This dataset is not ready to be enabled"
    }
  next: return_not_allowed

assign_not_found_response:
  assign:
    format_res: {
      dgId: '${id}',
      operationType: '${operation_type}',
      operationSuccessful: false,
      errorResponse: "dataset doesn't exist"
    }
  next: return_not_found

assign_status_update_error_response:
  assign:
    format_res: {
      dgId: '${id}',
      operationType: '${operation_type}',
      operationSuccessful: false,
      errorResponse: "Dataset group status not updated"
    }
  next: return_not_found

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_not_found:
  status: 400
  return: ${format_res}
  next: end

return_not_allowed:
  status: 400
  return: ${format_res}
  next: end

operation_not_support:
  status: 400
  return: "Bad Request-Operation not support"
  next: end