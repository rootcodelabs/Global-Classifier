declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"

extract_request_data:
  assign:
    dg_id: ${incoming.body.dgId}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${dg_id !== null}
      next: get_dataset_group
  next: return_incorrect_request

get_dataset_group:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-connected-models"
    body:
      id: ${dg_id}
  result: res
  next: check_dataset_group_status

check_dataset_group_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_dataset_group_exist
  next: assign_fail_response

check_dataset_group_exist:
  switch:
    - condition: ${res.response.body.length>0}
      next: check_connected_model_exist
  next: return_not_found

check_connected_model_exist:
  switch:
    - condition: ${res.response.body[0].connectedModels !== null}
      next: get_connected_dg_group_model_ids
  next: assign_empty_response

get_connected_dg_group_model_ids:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_connected_models_ids"
    headers:
      type: json
    body:
      data: ${JSON.parse(res.response.body[0].connectedModels.value)}
  result: res_models
  next: check_connected_dg_group_model_ids_status

check_connected_dg_group_model_ids_status:
  switch:
    - condition: ${200 <= res_models.response.statusCodeValue && res_models.response.statusCodeValue < 300}
      next: assign_model_ids
  next: assign_fail_response

assign_model_ids:
  assign:
    model_ids: ${res_models.response.body}
  next: update_training_status

update_training_status:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-data-models-re-training-needed"
    body:
      ids: ${model_ids}
  result: res_update
  next: check_data_model_update_status

check_data_model_update_status:
  switch:
    - condition: ${200 <= res_update.response.statusCodeValue && res_update.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      modelIds: '${model_ids}',
      trainingStatus: 'retraining needed',
      operationSuccessful: true,
    }
  next: return_ok

assign_empty_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      modelIds: '',
      trainingStatus: 'retraining needed',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      modelIds: '',
      trainingStatus: 'retraining needed',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_not_found:
  status: 404
  return: "Data Group Not Found"
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end
