declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CREATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: modelId
        type: number
        description: "Body field 'modelId'"
      - field: modelName
        type: string
        description: "Body field 'modelName'"
      - field: majorVersion
        type: number
        description: "Body field 'majorVersion'"
      - field: minorVersion
        type: number
        description: "Body field 'minorVersion'"
      - field: latest
        type: boolean
        description: "Body field 'latest'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    model_id: ${incoming.body.modelId}
    model_name: ${incoming.body.modelName}
    major_version: ${incoming.body.majorVersion}
    minor_version: ${incoming.body.minorVersion}
    latest: ${incoming.body.latest}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${model_id !== null || major_version !=null || minor_version !==null}
      next: get_data_model_by_id
  next: return_incorrect_request

get_data_model_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-data-model-by-id"
    body:
      id: ${model_id}
  result: res_model
  next: check_data_model_status

check_data_model_status:
  switch:
    - condition: ${200 <= res_model.response.statusCodeValue && res_model.response.statusCodeValue < 300}
      next: check_data_model_exist
  next: assign_fail_response

check_data_model_exist:
  switch:
    - condition: ${res_model.response.body.length>0}
      next: get_random_string_cookie
  next: return_model_not_found

get_random_string_cookie:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_random_string"
    headers:
      type: json
  result: res_cookie
  next: check_random_string_status

check_random_string_status:
  switch:
    - condition: ${200 <= res_cookie.response.statusCodeValue && res_cookie.response.statusCodeValue < 300}
      next: assign_csrf_cookie
  next: assign_fail_response

assign_csrf_cookie:
  assign:
    csrf_cookie: ${'_csrf=' + res_cookie.response.body.randomHexString+';'}
  next: create_data_model_progress_session

create_data_model_progress_session:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/insert-data-model-progress-session"
    body:
      model_id: ${model_id}
      model_name: ${model_name}
      major_version: ${major_version}
      minor_version: ${minor_version}
      latest: ${latest}
      progress_percentage: 0
      training_progress_status: 'Initiating Training'
  result: res
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: assign_session_id
  next: assign_fail_response

assign_session_id:
  assign:
    session_id: ${res.response.body[0].id}
  next: get_csrf_token

get_csrf_token:
  call: http.get
  args:
    url: "[#CLASSIFIER_NOTIFICATIONS]/csrf-token"
    headers:
      cookie: ${csrf_cookie}
  result: res_token
  next: check_token_status

check_token_status:
  switch:
    - condition: ${200 <= res_token.response.statusCodeValue && res_token.response.statusCodeValue < 300}
      next: assign_csrf_token
  next: assign_fail_response

assign_csrf_token:
  assign:
    token: ${res_token.response.body.csrfToken}
  next: update_progress

update_progress:
  call: http.post
  args:
    url: "[#CLASSIFIER_NOTIFICATIONS]/model/progress"
    headers:
      X-CSRF-Token: ${token}
      cookie: ${csrf_cookie}
    body:
      sessionId: ${session_id}
      progressPercentage: 0
      trainingStatus: 'Initiating Training'
      trainingMessage: ''
  result: res_node
  next: check_node_server_status

check_node_server_status:
  switch:
    - condition: ${200 <= res_node.response.statusCodeValue && res_node.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      sessionId: '${session_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      sessionId: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_model_not_found:
  status: 404
  return: "Model Not Found"
  next: end
