declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CORRECTED-METADATA-EXPORT'"
  method: get
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    params:
      - field: platform
        type: string
        description: "Parameter 'platform'"
      - field: sortType
        type: string
        description: "Parameter 'sortType'"

extract_data:
  assign:
    platform: ${incoming.params.platform}
    sort_type: ${incoming.params.sortType}
  next: get_corrected_input_metadata

get_corrected_input_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/export-corrected-input-metadata"
    body:
      platform: ${platform}
      sorting: ${sort_type}
  result: res_corrected
  next: check_input_metadata_status

check_input_metadata_status:
  switch:
    - condition: ${200 <= res_corrected.response.statusCodeValue && res_corrected.response.statusCodeValue < 300}
      next: check_input_metadata_exist
  next: assign_fail_response

check_input_metadata_exist:
  switch:
    - condition: ${res_corrected.response.body.length>0}
      next: assign_success_response
  next: assign_empty_response

assign_success_response:
  assign:
    format_res: {
      operationSuccessful: true,
      data: '${res_corrected.response.body}'
    }
  next: return_ok

assign_empty_response:
  assign:
    format_res: {
      operationSuccessful: true,
      data: '${[]}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      operationSuccessful: false,
      data: '${[]}'
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end