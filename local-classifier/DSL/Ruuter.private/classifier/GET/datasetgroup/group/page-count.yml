declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'PAGE-COUNT'"
  method: get
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    params:
      - field: groupId
        type: number
        description: "Parameter 'groupId'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_data:
  assign:
    group_id: ${Number(incoming.params.groupId)}
    cookie: ${incoming.headers.cookie}
  next: get_dataset_group_fields_by_id

get_dataset_group_fields_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-fields-by-id"
    body:
      id: ${group_id}
  result: res_dataset
  next: check_fields_status

check_fields_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: check_fields_data_exist
  next: assign_fail_response

check_fields_data_exist:
  switch:
    - condition: ${res_dataset.response.body.length>0}
      next: assign_fields_response
  next: assign_fail_response

assign_fields_response:
  assign:
    num_pages: ${res_dataset.response.body[0].numPages}
  next: assign_formated_response

assign_formated_response:
  assign:
    val: {
      dgId: '${group_id}',
      numPages: '${num_pages}'
    }
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      operationSuccessful: true,
      data: '${val}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      operationSuccessful: false,
      data: '${[]}'
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end