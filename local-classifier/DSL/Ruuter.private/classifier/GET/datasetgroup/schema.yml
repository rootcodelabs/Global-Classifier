declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'SCHEMA'"
  method: get
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    params:
      - field: dgId
        type: number
        description: "Parameter 'dgId'"

extract_data:
  assign:
    dg_id: ${Number(incoming.params.dgId)}
  next: get_dataset_group_schema

get_dataset_group_schema:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-dataset-group-schema"
    body:
      id: ${dg_id}
  result: res_dataset
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: check_data_exist
  next: assign_fail_response

check_data_exist:
  switch:
    - condition: ${res_dataset.response.body.length>0}
      next: assign_Json_format
  next: assign_not_found_response

assign_Json_format:
  assign:
    validationCriteria: ${JSON.parse(res_dataset.response.body[0].validationCriteria.value)}
    classHierarchy: ${JSON.parse(res_dataset.response.body[0].classHierarchy.value)}
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${dg_id}',
      operationSuccessful: true,
      validationCriteria: '${validationCriteria}',
      classHierarchy: '${classHierarchy}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '${ dg_id }',
      operationSuccessful: false
    }
  next: return_bad_request

assign_not_found_response:
  assign:
    format_res: {
      dgId: '${ dg_id }',
      operationSuccessful: false,
      errorResponse: "dataset doesn't exist"
    }
  next: return_not_found

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_not_found:
  status: 404
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end