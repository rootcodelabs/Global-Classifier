declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'OPTIONS'"
  method: get
  accepts: json
  returns: json
  namespace: classifier

get_data_model_options:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-data-model-options"
  result: res_options
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_options.response.statusCodeValue && res_options.response.statusCodeValue < 300}
      next: get_dataset_group_data
  next: return_bad_request

get_dataset_group_data:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-validated-all-dataset-groups"
  result: res_dataset
  next: check_dataset_group_status

check_dataset_group_status:
  switch:
    - condition: ${200 <= res_dataset.response.statusCodeValue && res_dataset.response.statusCodeValue < 300}
      next: check_data_exist
  next: return_bad_request

check_data_exist:
  switch:
    - condition: ${res_dataset.response.body.length>0}
      next: assign_dataset
  next: assign_empty

assign_dataset:
  assign:
    dataset_group: ${res_dataset.response.body}
  next: assign_success_response

assign_empty:
  assign:
    dataset_group: []
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      baseModels: '${res_options.response.body[0].baseModels}',
      deploymentPlatforms: '${res_options.response.body[0].deploymentPlatforms}',
      maturityLabels: '${res_options.response.body[0].maturityLabels}',
      datasetGroups: '${dataset_group}'
    }
  next: return_ok

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end

