declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'OVERVIEW'"
  method: get
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    params:
      - field: page
        type: number
        description: "Parameter 'page'"
      - field: pageSize
        type: number
        description: "Parameter 'pageSize'"
      - field: sortType
        type: string
        description: "Parameter 'sortType'"
      - field: modelName
        type: string
        description: "Parameter 'modelName'"
      - field: majorVersion
        type: string
        description: "Parameter 'majorVersion'"
      - field: minorVersion
        type: string
        description: "Parameter 'minorVersion'"
      - field: platform
        type: string
        description: "Parameter 'platform'"
      - field: datasetGroup
        type: number
        description: "Parameter 'datasetGroup'"
      - field: trainingStatus
        type: string
        description: "Parameter 'trainingStatus'"
      - field: deploymentMaturity
        type: string
        description: "Parameter 'deploymentMaturity'"
      - field: isProductionModel
        type: boolean
        description: "Parameter 'isProductionModel'"
      - field: sortBy
        type: string
        description: "Parameter 'sortBy'"

extract_data:
  assign:
    page: ${Number(incoming.params.page)}
    page_size: ${Number(incoming.params.pageSize)}
    sort_type: ${incoming.params.sortType}
    model_name: ${incoming.params.modelName}
    major_version: ${Number(incoming.params.majorVersion)}
    minor_version: ${Number(incoming.params.minorVersion)}
    platform: ${incoming.params.platform}
    dataset_group: ${Number(incoming.params.datasetGroup)}
    training_status: ${incoming.params.trainingStatus}
    deployment_maturity: ${incoming.params.deploymentMaturity}
    is_production_model: ${JSON.parse(incoming.params.isProductionModel)}
    sort_by: ${incoming.params.sortBy}
  next: check_sort_by

check_sort_by:
  switch:
    - condition: ${sort_by === 'name' || sort_by === 'created_timestamp'}
      next: check_production_model_status
  next: set_sort_by

set_sort_by:
  assign:
    sort_by: 'name'
  next: check_production_model_status

check_production_model_status:
  switch:
    - condition: ${is_production_model === true}
      next: get_production_data_model_meta_data_overview
  next: get_data_model_meta_data_overview

get_production_data_model_meta_data_overview:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-production-data-model-metadata"
  result: res_model
  next: check_status

get_data_model_meta_data_overview:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-paginated-data-model-metadata"
    body:
      page: ${page}
      page_size: ${page_size}
      sorting: ${sort_type}
      model_name: ${model_name}
      major_version: ${major_version}
      minor_version: ${minor_version}
      platform: ${platform}
      dataset_group: ${dataset_group}
      training_status: ${training_status}
      deployment_maturity: ${deployment_maturity}
      sort_type: ${sort_type}
      sort_by: ${sort_by}
  result: res_model
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_model.response.statusCodeValue && res_model.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      operationSuccessful: true,
      data: '${res_model.response.body}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      operationSuccessful: false,
      data: '${[]}'
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end