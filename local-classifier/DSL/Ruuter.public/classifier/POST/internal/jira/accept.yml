declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'ACCEPT'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: payload
        type: string
        description: "Body field 'payload'"
      - field: extractData
        type: json
        description: "Body field 'extractData'"

get_webhook_data:
  assign:
    payload: ${incoming.body.payload}
    extract_data: ${incoming.body.extractData}
    issue_info: ${incoming.body.payload.issue}
    event_type: ${incoming.body.payload.webhookEvent}
  next: check_event_type

check_event_type:
  switch:
    - condition: ${event_type === 'jira:issue_updated'}
      next: get_existing_labels
  next: send_issue_data

get_existing_labels:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-jira-input-row-data"
    body:
      inputId: ${issue_info.key}
  result: res
  next: check_input_response

check_input_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_previous_labels
  next: return_db_request_fail

check_previous_labels:
  switch:
    - condition: ${res.response.body.length > 0}
      next: assign_previous_labels
  next: send_issue_data

assign_previous_labels:
  assign:
    previous_corrected_labels: ${res.response.body[0].correctedLabels !==null ? JSON.parse(res.response.body[0].correctedLabels.value) :[]}
    previous_predicted_labels: ${res.response.body[0].predictedLabels !==null ? JSON.parse(res.response.body[0].predictedLabels.value) :[]}
  next: validate_issue_labels

validate_issue_labels:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_label_mismatch"
    headers:
      type: json
    body:
      newLabels: ${issue_info.fields.labels}
      correctedLabels: ${previous_corrected_labels}
      predictedLabels: ${previous_predicted_labels}
  result: label_response
  next: check_label_mismatch

check_label_mismatch:
  switch:
    - condition: ${label_response.response.body.isMismatch === 'true'}
      next: send_issue_data
  next: return_data

send_issue_data:
  call: http.post
  args:
    url: "[#CLASSIFIER_ANONYMIZER]/anonymize"
    headers:
      type: json
    body:
      platform: 'JIRA'
      key: ${issue_info.key}
      data: ${extract_data}
      parentFolderId: None
      mailId: None
      labels: ${issue_info.fields.labels}
  result: res

check_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: return_ok
  next: return_bad_request

return_ok:
  status: 200
  return: "Jira data send successfully"
  next: end

return_data:
  status: 200
  return: "Not Sent"
  next: end

return_error_found:
  status: 400
  return: "Error Found"
  next: end

return_db_request_fail:
  status: 400
  return: "Fetch data for labels failed"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end




